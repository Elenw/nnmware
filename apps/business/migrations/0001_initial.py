# -*- coding: utf-8 -*-
# Generated by Django 1.10.dev20160517112445 on 2016-05-17 09:22
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import nnmware.core.abstract


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('address', '0002_auto_20160517_0917'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Agencies',
                'verbose_name': 'Agency',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created date')),
                ('updated_date', models.DateTimeField(blank=True, null=True, verbose_name='Updated date')),
                ('teaser', models.CharField(blank=True, db_index=True, max_length=255, verbose_name='Teaser')),
                ('teaser_en', models.CharField(blank=True, db_index=True, max_length=255, verbose_name='Teaser(English)')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
                ('longitude', models.FloatField(db_index=True, default=0.0, verbose_name='Longitude')),
                ('latitude', models.FloatField(db_index=True, default=0.0, verbose_name='Latitude')),
                ('zipcode', models.CharField(blank=True, max_length=20, verbose_name='Zipcode')),
                ('street', models.CharField(blank=True, default='', max_length=255, verbose_name='Street')),
                ('house_number', models.CharField(blank=True, default='', max_length=5, verbose_name='Number of house')),
                ('building', models.CharField(blank=True, default='', max_length=5, verbose_name='Building')),
                ('flat_number', models.CharField(blank=True, default='', max_length=5, verbose_name='Number of flat')),
                ('work_on', models.TimeField(blank=True, null=True, verbose_name='Work time from')),
                ('work_off', models.TimeField(blank=True, null=True, verbose_name='Work time to')),
                ('phone_on', models.TimeField(blank=True, null=True, verbose_name='Phone time from')),
                ('phone_off', models.TimeField(blank=True, null=True, verbose_name='Phone time to')),
                ('fullname', models.CharField(blank=True, db_index=True, max_length=255, verbose_name='Full Name')),
                ('fullname_en', models.CharField(blank=True, db_index=True, max_length=255, verbose_name='Full Name(English)')),
                ('branch', models.BooleanField(db_index=True, default=False, verbose_name='Is branch?')),
                ('admins', models.ManyToManyField(blank=True, related_name='company_comp_adm', to=settings.AUTH_USER_MODEL, verbose_name='Company Admins')),
            ],
            options={
                'verbose_name_plural': 'Companies',
                'verbose_name': 'Company',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.CreateModel(
            name='CompanyCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
                ('rootnode', models.BooleanField(default=False, verbose_name='Root node')),
                ('login_required', models.BooleanField(default=False, help_text='Enable this if users must login before access with this objects.', verbose_name='Login required')),
                ('admins', models.ManyToManyField(blank=True, related_name='business_companycategory_adm', to=settings.AUTH_USER_MODEL, verbose_name='Category Admins')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='business.CompanyCategory', verbose_name='Parent')),
            ],
            options={
                'ordering': ['parent__id'],
                'verbose_name_plural': 'Companies Categories',
                'verbose_name': 'Company Category',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.CreateModel(
            name='CompanyDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inn', models.CharField(blank=True, max_length=12, verbose_name='INN')),
                ('kpp', models.CharField(blank=True, max_length=9, verbose_name='KPP')),
                ('kpp_add', models.CharField(blank=True, max_length=9, verbose_name='KPP (addon)')),
                ('okato', models.CharField(blank=True, max_length=11, verbose_name='OKATO')),
                ('okpo', models.CharField(blank=True, max_length=10, verbose_name='OKPO')),
                ('ogrn', models.CharField(blank=True, max_length=13, verbose_name='OGRN')),
                ('num_cert_state_reg', models.CharField(blank=True, max_length=20, verbose_name='Number certificate of state registration')),
                ('date_state_reg', models.DateField(blank=True, null=True, verbose_name='Date of state registration')),
                ('authority_state_reg', models.CharField(blank=True, max_length=255, verbose_name='Authority of state registration')),
                ('date_ogrn', models.DateField(blank=True, null=True, verbose_name='Date of ogrn')),
                ('authority_ogrn', models.CharField(blank=True, max_length=255, verbose_name='Authority of ogrn')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='business.Company', verbose_name='Company')),
            ],
            options={
                'verbose_name_plural': 'Companies details',
                'verbose_name': 'Company detail',
            },
        ),
        migrations.CreateModel(
            name='CompanyWorkTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mon_on', models.TimeField(blank=True, null=True, verbose_name='Monday time from')),
                ('mon_off', models.TimeField(blank=True, null=True, verbose_name='Monday time to')),
                ('mon_break_on', models.TimeField(blank=True, null=True, verbose_name='Monday break from')),
                ('mon_break_off', models.TimeField(blank=True, null=True, verbose_name='Monday break to')),
                ('mon_any', models.BooleanField(default=False, verbose_name='Monday any time')),
                ('tue_on', models.TimeField(blank=True, null=True, verbose_name='Tuesday time from')),
                ('tue_off', models.TimeField(blank=True, null=True, verbose_name='Tuesday time to')),
                ('tue_break_on', models.TimeField(blank=True, null=True, verbose_name='Tuesday break from')),
                ('tue_break_off', models.TimeField(blank=True, null=True, verbose_name='Tuesday break to')),
                ('tue_any', models.BooleanField(default=False, verbose_name='Tuesday any time')),
                ('wed_on', models.TimeField(blank=True, null=True, verbose_name='Wednesday time from')),
                ('wed_off', models.TimeField(blank=True, null=True, verbose_name='Wednesday time to')),
                ('wed_break_on', models.TimeField(blank=True, null=True, verbose_name='Wednesday break from')),
                ('wed_break_off', models.TimeField(blank=True, null=True, verbose_name='Wednesday break to')),
                ('wed_any', models.BooleanField(default=False, verbose_name='Wednesday any time')),
                ('thu_on', models.TimeField(blank=True, null=True, verbose_name='Thursday time from')),
                ('thu_off', models.TimeField(blank=True, null=True, verbose_name='Thursday time to')),
                ('thu_break_on', models.TimeField(blank=True, null=True, verbose_name='Thursday break from')),
                ('thu_break_off', models.TimeField(blank=True, null=True, verbose_name='Thursday break to')),
                ('thu_any', models.BooleanField(default=False, verbose_name='Thursday any time')),
                ('fri_on', models.TimeField(blank=True, null=True, verbose_name='Friday time from')),
                ('fri_off', models.TimeField(blank=True, null=True, verbose_name='Friday time to')),
                ('fri_break_on', models.TimeField(blank=True, null=True, verbose_name='Friday break from')),
                ('fri_break_off', models.TimeField(blank=True, null=True, verbose_name='Friday break to')),
                ('fri_any', models.BooleanField(default=False, verbose_name='Friday any time')),
                ('sat_on', models.TimeField(blank=True, null=True, verbose_name='Saturday time from')),
                ('sat_off', models.TimeField(blank=True, null=True, verbose_name='Saturday time to')),
                ('sat_break_on', models.TimeField(blank=True, null=True, verbose_name='Saturday break from')),
                ('sat_break_off', models.TimeField(blank=True, null=True, verbose_name='Saturday break to')),
                ('sat_any', models.BooleanField(default=False, verbose_name='Saturday any time')),
                ('sun_on', models.TimeField(blank=True, null=True, verbose_name='Sunday time from')),
                ('sun_off', models.TimeField(blank=True, null=True, verbose_name='Sunday time to')),
                ('sun_break_on', models.TimeField(blank=True, null=True, verbose_name='Sunday break from')),
                ('sun_break_off', models.TimeField(blank=True, null=True, verbose_name='Sunday break to')),
                ('sun_any', models.BooleanField(default=False, verbose_name='Sunday any time')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='business.Company', verbose_name='Company')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Times of works',
                'verbose_name': 'Time of work',
            },
        ),
        migrations.CreateModel(
            name='TypeEmployer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('position', 'name'),
                'verbose_name_plural': 'Types of employers',
                'verbose_name': 'Type of employer',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.CreateModel(
            name='TypeEmployerOther',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
                ('is_radio', models.BooleanField(default=False, verbose_name='Radio button?')),
                ('employer_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='business.TypeEmployer', verbose_name='Type of employer')),
            ],
            options={
                'verbose_name_plural': 'Types of other sphere act. employers',
                'verbose_name': 'Type of other sphere act. employer',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.CreateModel(
            name='TypeEmployerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
                ('is_radio', models.BooleanField(default=False, verbose_name='Radio button?')),
                ('employer_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='business.TypeEmployer', verbose_name='Type of employer')),
            ],
            options={
                'verbose_name_plural': 'Types of employers profiles',
                'verbose_name': 'Type of employer profile',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.CreateModel(
            name='Vacancy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created date')),
                ('updated_date', models.DateTimeField(blank=True, null=True, verbose_name='Updated date')),
                ('teaser', models.CharField(blank=True, db_index=True, max_length=255, verbose_name='Teaser')),
                ('teaser_en', models.CharField(blank=True, db_index=True, max_length=255, verbose_name='Teaser(English)')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
                ('vacancy_type', models.IntegerField(choices=[(0, 'Unknown'), (1, 'Permanent'), (2, 'Contract'), (3, 'Internship'), (4, 'Freelance')], db_index=True, default=0, verbose_name='Type of vacancy')),
                ('admins', models.ManyToManyField(blank=True, related_name='business_vacancy_vac_adm', to=settings.AUTH_USER_MODEL, verbose_name='Company Admins')),
            ],
            options={
                'ordering': ['-created_date'],
                'verbose_name_plural': 'Vacancies',
                'verbose_name': 'Vacancy',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.CreateModel(
            name='VacancyCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(blank=True, height_field='img_height', max_length=1024, upload_to='img/%Y/%m/%d/', verbose_name='Image', width_field='img_width')),
                ('img_height', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('img_width', models.PositiveIntegerField(blank=True, null=True, verbose_name='Image height')),
                ('name', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, db_index=True, default='', max_length=255, verbose_name='Name(English')),
                ('enabled', models.BooleanField(db_index=True, default=True, verbose_name='Enabled in system')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', verbose_name='Description(English)')),
                ('slug', models.CharField(blank=True, db_index=True, default='', max_length=100, verbose_name='URL-identifier')),
                ('position', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0, verbose_name='Priority')),
                ('docs', models.IntegerField(blank=True, null=True)),
                ('pics', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
                ('rootnode', models.BooleanField(default=False, verbose_name='Root node')),
                ('login_required', models.BooleanField(default=False, help_text='Enable this if users must login before access with this objects.', verbose_name='Login required')),
                ('admins', models.ManyToManyField(blank=True, related_name='business_vacancycategory_adm', to=settings.AUTH_USER_MODEL, verbose_name='Category Admins')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='business.VacancyCategory', verbose_name='Parent')),
            ],
            options={
                'ordering': ['parent__id'],
                'verbose_name_plural': 'Vacancy Categories',
                'verbose_name': 'Vacancy Category',
            },
            bases=(models.Model, nnmware.core.abstract.PicsMixin),
        ),
        migrations.AddField(
            model_name='vacancy',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vacancy', to='business.VacancyCategory', verbose_name='Vacancy category'),
        ),
        migrations.AddField(
            model_name='vacancy',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='business.Company', verbose_name='Vacancy owner company'),
        ),
        migrations.AddField(
            model_name='vacancy',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Vacancy owner user'),
        ),
        migrations.AddField(
            model_name='company',
            name='category',
            field=models.ManyToManyField(related_name='companies', to='business.CompanyCategory', verbose_name='All company category'),
        ),
        migrations.AddField(
            model_name='company',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_cit', to='address.City', verbose_name='City'),
        ),
        migrations.AddField(
            model_name='company',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_cou', to='address.Country', verbose_name='Country'),
        ),
        migrations.AddField(
            model_name='company',
            name='employer_other',
            field=models.ManyToManyField(blank=True, to='business.TypeEmployerOther', verbose_name='Types of employer'),
        ),
        migrations.AddField(
            model_name='company',
            name='employer_profile',
            field=models.ManyToManyField(blank=True, to='business.TypeEmployerProfile', verbose_name='Types of employer profile'),
        ),
        migrations.AddField(
            model_name='company',
            name='main_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company', to='business.CompanyCategory', verbose_name='Company category'),
        ),
        migrations.AddField(
            model_name='company',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='business.Company', verbose_name='Parent company'),
        ),
        migrations.AddField(
            model_name='company',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_reg', to='address.Region', verbose_name='Region'),
        ),
        migrations.AddField(
            model_name='company',
            name='stationmetro',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_metro', to='address.StationMetro', verbose_name='Station of metro'),
        ),
    ]
